snippet github_url_link_to_internal_anchor
[${1:Link Name With Spaces / Slash}](#${2:link-name-with-spaces--slash})
${0}
endsnippet

snippet github_url_link_to_external_page
[${1:Page Name}](${2:https://somesite.com/page})
${0}
endsnippet

snippet github_url_internal_anchor
${1:### Anchor With Spaces / Slash}
${0}
endsnippet

snippet github_image_link
![${1:Image Name}](${2:https://somesite.com/image.jpg})
${0}
endsnippet

snippet github_readme_template
# ${1:project-title (same as repo-title)}

One or two lines describing project purpose.

[![Release](https://img.shields.io/github/release/digimokan/$1.svg?label=release)](https://github.com/digimokan/$1/releases/latest "Latest Release Notes")
[![License](https://img.shields.io/badge/license-MIT-blue.svg?label=license)](LICENSE.txt "Project License")
[![Build Status](https://img.shields.io/travis/com/digimokan/$1/master.svg?label=linux+build)](https://travis-ci.com/digimokan/$1 "Build And Test Results From Master Branch")

## Table Of Contents

* [Motivation](#motivation)
* [Features](#features)
* [Requirements](#requirements)
* [Quick Start](#quick-start)
* [Full Usage / Options](#full-usage--options)
* [Examples](#examples)
* [Design](#design)
* [Source Code Layout](#source-code-layout)
* [Contributing](#contributing)

## Motivation

A paragraph or two about project motivation and overall design.

## Features

* Feature 1.
* Feature 2.

A paragraph or two about project motivation and overall design.

## Requirements

* Some OS
* Some Language / Standard
* Some Build Tool / Package Manager
* Some Library
* Some Program

## Quick Start

1. Clone project into a local project directory:

   \`\`\`shell
   \$ git clone https://github.com/digimokan/$1.git
   \`\`\`

2. Change to the local project directory:

   \`\`\`shell
   \$ cd $1
   \`\`\`

3. Build the program:

   \`\`\`shell
   \$ ./third_party/smart-build/src/smart-build.sh --build-type-release
   \`\`\`

4. Run the program:

   \`\`\`shell
   \$ ./$1
   \`\`\`

## Full Usage / Options

\`\`\`
<cut and paste help menu here>
\`\`\`

## Examples

* Run with some option:

   \`\`\`shell
   \$ ./$1 -d
   \`\`\`

* Run with some other option:

   \`\`\`shell
   \$ ./$1 -rt
   \`\`\`

## Design

A paragraph or two about architecture.

<img src="readme_assets/design_diagram.svg" width="100%" height="400" alt="Design Diagram">

## Source Code Layout

\`\`\`
├─┬ $1/
│ │
│ ├─┬ src/
│ │ ├─┬ somea/
│ │ │ ├── Hello.cpp
│ │ │ └── Hello.hpp
│ │ ├─┬ someb/
│ │ │ ├── Goodbye.cpp
│ │ │ └── Goodbye.hpp
│ │ └── main.cpp
│ │
│ ├─┬ tests/
│ │ ├─┬ unit_tests/
│ │ │ └── Goodbye_test.cpp
│ │ └── doctest_testharness.cpp
│ │
│ ├─┬ third_party/
│ │ └─┬ doctest/
│ │   └── doctest.h
│ │
│ ├── .project_config
│ ├── .vimrc
│ ├── smart-build.sh
│ └── CMakeLists.txt
\`\`\`

## Contributing

* Feel free to report a bug or propose a feature by opening a new
  [Issue](https://github.com/digimokan/$1/issues).
* Follow the project's [Contributing](CONTRIBUTING.md) guidelines.
* Respect the project's [Code Of Conduct](CODE_OF_CONDUCT.md).
${0}
endsnippet

snippet github_code_of_conduct
This community is made up of a mixture of professionals and volunteers from all
over the world. Diversity is one of our greatest strengths, but it can also lead
to communication issues and unhappiness. To that end, here are ground rules that
contributors to this project should adhere to.

This isn’t an exhaustive list of things that you can’t do. Rather, take it in
the spirit in which it’s intended - a guide to make it easier to be excellent to
each other:

* Be considerate. Your work will be used by other people, and you in turn will
  depend on the work of others. Any decision you take will affect users and
  contributors, and you should take those consequences into account when making
  decisions.

* Be respectful. Not all of us will agree all the time, but disagreement is no
  excuse for poor behavior and poor manners. We might all experience some
  frustration now and then, but we cannot allow that frustration to turn into a
  personal attack. It’s important to remember that a community where people feel
  uncomfortable or threatened is not a productive one.

* Be disciplined. When you disagree, make the idea, not the person, the focal
  point of your communication. Stop and reconsider your phrasing when you type
  the word "you." When you become critical of an idea or action, focus on asking
  questions instead of making assertions.

Remember that we’re different. The strength of a project comes from its varied
community - people from a wide range of backgrounds. Different people have
different perspectives on issues. If you cannot understand why someone holds a
viewpoint, don't assume that they’re wrong. Don’t forget that it is human to err,
and that blaming each other doesn’t get us anywhere. Teamwork makes a project
successful, not arguments.
${0}
endsnippet

snippet github_contributing
# Contributing

## Building And Testing The Project

1. This project uses [onqtam/doctest](https://github.com/onqtam/doctest) for
   unit testing. _doctest_ is pulled in automatically as a submodule with
   \`--recurse-submodules\`.

2. This project uses [${1:digimokan}/smart-build](https://github.com/digimokan/smart-build)
  to build with _CMake_ and test the code. See the _smart-build_ repo for usage
  and examples, or use the _smart-build_ \`--help\` option. To do a basic build
  and run tests:

        $ cd ${2:repo_title}
        $ ./third_party/smart-build/src/smart-build.sh -cdt

## Git Workflow

### Initial Setup

1. [GITHUB PAGE] Fork the project repo:

    * click "fork" from https://github.com/$1/$2

2. [LOCAL] Create local repo:

        $ git clone --recurse-submodules https://github.com/[your-github-username]/$2

3. [LOCAL] Link upstream repo:

        $ git remote add upstream https://github.com/$1/$2

### Development Workflow

1. Find the issue you have been assigned, or assign a needed issue to yourself.

2. [LOCAL] Retrieve all changes from upstream.  Update local master branch and
sync it with your forked origin repo.  Create new local branches to track
upstream branches you want to follow locally:

        $ git fetch upstream
        $ git checkout master
        $ git merge upstream/master
        $ git push origin master
        $ git branch --track [branch-name] upstream/[branch-name]

3. [LOCAL] Create and switch to a feature/fix branch for your issue:

        $ git checkout master
        $ git checkout -b feat-issuename

4. [LOCAL] Work on your feature branch:

        $ [edit existing files / new files]
        $ git add [existing/new files]
        $ git commit

5. [LOCAL] Periodically merge in upstream changes into your feature branch.
When working on feature branch for long periods, this merging reduces the
confusion that may come with a single large merge in step 8:

        $ git fetch upstream
        $ git checkout master
        $ git merge upstream/master
        $ git push origin master
        $ git checkout feat-issuename
        $ git merge master

6. [LOCAL] Periodically push your feature branch to your forked origin repo
(to back it up). If you have permission, also push your feature branch to
upstream (so that others may view and comment on your progress):

        $ git push origin feat-issuename
        $ git push upstream feat-issuename

7. [LOCAL] When complete with your feature branch, retrieve all changes from
upstream. Update local master branch and sync it with your forked origin repo.
Create new local branches to track new upstream branches you want to follow
locally. Update other existing local branches with their upstream counterparts:

        $ git fetch upstream
        $ git checkout master
        $ git merge upstream/master
        $ git push origin master
        $ git branch --track [new-branch-name] upstream/[new-branch-name]
        $ git checkout [other-local-branch]
        $ git merge upstream/[other-local-branch]

8. [LOCAL] Merge changes from retrieved upstream master branch into your feature
branch:

        $ git checkout feat-issuename
        $ git merge master

9. [LOCAL - AS NEEDED] If merge notifies of conflicts, determine conflict files.
Edit and correct conflict files.  Flag conflict files as "corrected" by adding
them. Finish the merge by committing:

        $ git status
        $ [edit and correct conflict files]
        $ git add [conflict files]
        $ git commit

10. [LOCAL] Condense all commits in your feature branch into one single commit:

        $ git rebase -i master

11. [LOCAL] Push your feature branch to your forked repo. If you have
permission, push it to upstream repo (if others want to pull it down and test
it). Since you condensed your commits, you will have to force/overwrite the
uncondensed commits that currently exist on origin and upstream:

        $ git push -f origin feat-issuename
        $ git push -f upstream feat-issuename

12. [GITHUB PAGE] Create pull request, specifying additions/changes and issue
number(s):

    * Pull request is FROM your-forked-repo/feat-issuename TO
      upstream-repo/master.

13. [GITHUB PAGE] If pull request rejected, begin again from Step #4.

14. [LOCAL] Delete the feature branch locally, from your forked origin repo, and
from upstream repo (if you pushed it to upstream in step 11):

        $ git branch -d feat-issuename
        $ git push origin --delete feat-issuename
        $ git push upstream --delete feat-issuename

### Merging Pull Requests

NOTE: do not merge your own pull requests.

1. [GITHUB PAGE] Make sure pull request commentary is properly descriptive.

2. [GITHUB PAGE] Review each changed/added line in each source file.

3. [GITHUB PAGE] Comment appropriately on specific source code sections.

4. [GITHUB PAGE] Merge or reject pull request.
${0}
endsnippet

snippet github_pull_request_template
## Description

Please include a summary of the change and which issue number is fixed. Please
also include relevant motivation and context. List any dependencies that are
required for this change.

Fixes/Closes/Resolves #(issue-number)

## Type Of Change

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to
      not work as expected)
- [ ] This change requires a documentation update

## Tests Performed

Please describe the tests that you ran to verify your changes. If this project
already uses unit tests, list those tests. If you added tests, list those tests
here. Provide instructions to reproduce these tests. Please also list any
relevant details for your test configuration.

- [ ] Test A
- [ ] Test B

**Test Configuration**
* Hardware:
* OS:
* OS Release/Distribution:
* Date Of Last OS Update:
* Compiler Version:
* Shell:

## Checklist

- [ ] My code follows the style of this project.
- [ ] I have performed a self-review of my own code.
- [ ] I have commented my code, particularly in hard-to-understand areas.
- [ ] I have made corresponding changes to the documentation.
- [ ] My changes generate no new warnings.
- [ ] I have added tests that prove my fix is effective or that my feature
      works.
- [ ] New and existing unit tests pass locally with my changes.
- [ ] Any dependent changes have been merged and published in downstream
      modules.
${0}
endsnippet

snippet github_issue_template_bug_report_md
---
name: Bug Report
about: Create a report to help us improve
title: ''
labels: ''
assignees: ''

---

#### Prerequisites
* Ensure the issue isn't already reported.
* Follow the project's Contributing guidelines.
* Respect the project's Code Of Conduct.

#### Description
Describe the bug in as much relevant detail as possible.

#### Screenshots
As required.

#### Source Files
A list of relevant source files that will be affected by this issue. This list
will help contributors navigate the project and offer some clues about where to
start.

#### Steps To Reproduce
Include exact steps to reproduce the behavior.

#### Tasks
Break down the fix into specific tasks. List the tasks in the order they need to
be performed. Include links to specific lines of code where tasks should be
focused.
- [ ] Task 1
- [ ] Task 2
- [ ] Task 3${0}
endsnippet

snippet github_issue_template_feature_request_md
---
name: Feature Request
about: Suggest an idea for this project
title: ''
labels: ''
assignees: ''

---

#### Prerequisites
* Ensure the issue isn't already reported.
* Follow the project's Contributing guidelines.
* Respect the project's Code Of Conduct.

#### Description
Explain why the feature should be added (name specific use-cases).

#### Screenshots
As required.

#### Source Files
A list of relevant source files that will be affected by this issue. This list
will help contributors navigate the project and offer some clues about where to
start.

#### Tasks
Break down the feature request into specific tasks. List the tasks in the order
they need to be performed. Include links to specific lines of code where tasks
should be focused.
- [ ] Task 1
- [ ] Task 2
- [ ] Task 3${0}
endsnippet

snippet github_issue_template_custom_md
---
name: Custom Issue
about: Ask a question, raise a concern, etc.
title: ''
labels: ''
assignees: ''

---

#### Prerequisites
* Ensure the issue isn't already reported.
* Follow the project's Contributing guidelines.
* Respect the project's Code Of Conduct.

#### Description
Describe the question, concern, etc. here.

#### Screenshots
As required.

#### Source Files
A list of relevant source files that may link to this this issue.

#### Steps To Reproduce
Give background steps that may have led to reporting this issue.${0}
endsnippet

