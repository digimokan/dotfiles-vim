snippet comment_block
/*******************************************************************************
* ${0}
*******************************************************************************/
endsnippet

snippet module_comment
/*******************************************************************************
module:   ${1:mymodule}
author:   ${2:digimokan}
date:     ${3:`date '+%d %b %Y' | tr '[:lower:]' '[:upper:]'`}
purpose:  ${4:greatness}
*******************************************************************************/
${0}
endsnippet

snippet include_system
#include <${1:include_file}>${0}
endsnippet

snippet include_user
#include "${1:include_file}"${0}
endsnippet

snippet header_guard
#ifndef ${1:MY_HEADER}_H
#define $1_H 1

${0}

#endif // $1_H
endsnippet

snippet main_with_args
int main (int argc, char* argv[]) {
  ${0}

  return (0);
}

endsnippet

snippet main_no_args
int main () {
  ${0}

  return (0);
}

endsnippet

snippet for_loop
for (${1:initializer}; ${2:condition}; ${3:increment}) {
  ${0}
}
endsnippet

snippet if
if (${1:condition}) {
  ${2:statement}
}
${0}
endsnippet

snippet if_else
if (${1:condition}) {
  ${2:statement1}
} else {
  ${3:statement2}
}
${0}
endsnippet

snippet if_elseif
if (${1:condition1}) {
  ${2:statement1}
} else if (${3:condition2}) {
  ${4:statement2}
}
${0}
endsnippet

snippet if_elseif_else
if (${1:condition1}) {
  ${2:statement1}
} else if (${3:condition2}) {
  ${4:statement2}
} else {
  ${5:statement3}
}
${0}
endsnippet

snippet interface_header_file
/*******************************************************************************
module:   ${1:MyClassIface}
author:   ${2:digimokan}
date:     ${3:`date '+%d %b %Y' | tr '[:lower:]' '[:upper:]'`}
purpose:  ${4:greatness}
*******************************************************************************/

#ifndef ${5:MY_CLASS_IFACE}_HPP
#define $5_HPP 1

/*******************************************************************************
* SYSTEM INCLUDES
*******************************************************************************/

#include <cstddef>

/*******************************************************************************
* USER INCLUDES
*******************************************************************************/

#include "Raz.hpp"

/*******************************************************************************
* FORWARD DECLARES
*******************************************************************************/

enum class Grok;

/*******************************************************************************
* INTERFACE
*******************************************************************************/

class $1 {

public:

  // destructor
  virtual ~$1 () = default;

  // operators
  $1 (const $1& in) = default;
  $1& operator= (const $1& rh) = default;
  $1 ($1&& in) = default;
  $1& operator= ($1&& rh) = default;

  // base / derived methods
  virtual void method_for_instance_objs () = 0;

protected:

  // constructors
  $1 () = default;

};

/*******************************************************************************
* END
*******************************************************************************/

#endif // $5_HPP
${0}
endsnippet

snippet base_class_header_file
/*******************************************************************************
module:   ${1:MyClassBase}
author:   ${2:digimokan}
date:     ${3:`date '+%d %b %Y' | tr '[:lower:]' '[:upper:]'`}
purpose:  ${4:greatness}
*******************************************************************************/

#ifndef ${5:MY_CLASS_BASE}_HPP
#define $5_HPP 1

/*******************************************************************************
* SYSTEM INCLUDES
*******************************************************************************/

#include <cstddef>

/*******************************************************************************
* USER INCLUDES
*******************************************************************************/

#include "${6:MyClassIface}.hpp"

/*******************************************************************************
* FORWARD DECLARES
*******************************************************************************/

enum class Grok;

/*******************************************************************************
* INTERFACE
*******************************************************************************/

class $1 : public $6 {

public:

  // destructor
  ~$1 () override = default;

  // operators
  $1 (const $1& in) = default;
  $1& operator= (const $1& rh) = default;
  $1 ($1&& in) = default;
  $1& operator= ($1&& rh) = default;

  // base / derived methods
  void iface_method_that_base_impls () final;
  void iface_method_that_base_impls_default_code () override;
  void iface_method_that_deriveds_impl () override = 0;

protected:

  // constructors
  $1 ();

  // base / derived methods
  void base_class_method () final;
  virtual void base_method_that_base_impls_default_code ();
  virtual void base_method_that_deriveds_impl () = 0;

private:

  // fields
  size_t count;

  // helper methods
  void base_class_method ();

};

/*******************************************************************************
* END
*******************************************************************************/

#endif // $5_HPP
${0}
endsnippet

snippet class_derived_from_interface_header_file
/*******************************************************************************
module:   ${1:MyClass}
author:   ${2:digimokan}
date:     ${3:`date '+%d %b %Y' | tr '[:lower:]' '[:upper:]'`}
purpose:  ${4:greatness}
*******************************************************************************/

#ifndef ${5:MY_CLASS}_HPP
#define $5_HPP 1

/*******************************************************************************
* SYSTEM INCLUDES
*******************************************************************************/

#include <cstddef>

/*******************************************************************************
* USER INCLUDES
*******************************************************************************/

#include "${6:MyClassIface}.hpp"

/*******************************************************************************
* FORWARD DECLARES
*******************************************************************************/

enum class Grok;

/*******************************************************************************
* INTERFACE
*******************************************************************************/

class $1 : public $6 {

public:

  // constructors
  $1 () = default;

  // destructor
  ~$1 () override = default;

  // operators
  $1 (const $1& in) = default;
  $1& operator= (const $1& rh) = default;
  $1 ($1&& in) = default;
  $1& operator= ($1&& rh) = default;

  // base / derived methods
  void iface_method_that_derived_impls () final;

  // specialized methods
  void derived_class_method ();

private:

  // helper methods
  void derived_class_method ();

  // fields
  size_t current;

};

/*******************************************************************************
* END
*******************************************************************************/

#endif // $5_HPP
${0}
endsnippet

snippet class_derived_from_base_header_file
/*******************************************************************************
module:   ${1:MyClass}
author:   ${2:digimokan}
date:     ${3:`date '+%d %b %Y' | tr '[:lower:]' '[:upper:]'`}
purpose:  ${4:greatness}
*******************************************************************************/

#ifndef ${5:MY_CLASS}_HPP
#define $5_HPP 1

/*******************************************************************************
* SYSTEM INCLUDES
*******************************************************************************/

#include <cstddef>

/*******************************************************************************
* USER INCLUDES
*******************************************************************************/

#include "${6:MyClassBase}.hpp"

/*******************************************************************************
* FORWARD DECLARES
*******************************************************************************/

enum class Grok;

/*******************************************************************************
* INTERFACE
*******************************************************************************/

class $1 : public $6 {

public:

  // constructors
  $1 () = default;

  // destructor
  ~$1 () override = default;

  // operators
  $1 (const $1& in) = default;
  $1& operator= (const $1& rh) = default;
  $1 ($1&& in) = default;
  $1& operator= ($1&& rh) = default;

  // base / derived methods
  void iface_method_that_derived_impls () final;
  void base_method_that_derived_impls_visible_in_obj_instance () final;

  // specialized methods
  void derived_class_method ();

private:

  // helper methods
  void base_method_that_derived_impls_not_visible_in_obj_instance () final;
  void derived_class_method ();

  // fields
  size_t current;

};

/*******************************************************************************
* END
*******************************************************************************/

#endif // $5_HPP
${0}
endsnippet

snippet class_header_file
/*******************************************************************************
module:   ${1:MyClass}
author:   ${2:digimokan}
date:     ${3:`date '+%d %b %Y' | tr '[:lower:]' '[:upper:]'`}
purpose:  ${4:greatness}
*******************************************************************************/

#ifndef ${5:MY_CLASS}_HPP
#define $5_HPP 1

/*******************************************************************************
* SYSTEM INCLUDES
*******************************************************************************/

#include <cstddef>

/*******************************************************************************
* USER INCLUDES
*******************************************************************************/

#include "Woz.hpp"

/*******************************************************************************
* FORWARD DECLARES
*******************************************************************************/

enum class Grok;

/*******************************************************************************
* INTERFACE
*******************************************************************************/

class $1 : public $6 {

public:

  // constructors
  $1 () = default;

  // destructor
  ~$1 () override = default;

  // operators
  $1 (const $1& in) = default;
  $1& operator= (const $1& rh) = default;
  $1 ($1&& in) = default;
  $1& operator= ($1&& rh) = default;

  // specialized methods
  void foo ();

private:

  // helper methods
  void bar ();

  // fields
  size_t avg;

};

/*******************************************************************************
* END
*******************************************************************************/

#endif // $5_HPP
${0}
endsnippet

snippet enum_class_file
/*******************************************************************************
module:   ${1:MyEnumClass}
author:   ${2:digimokan}
date:     ${3:`date '+%d %b %Y' | tr '[:lower:]' '[:upper:]'`}
purpose:  ${4:greatness}
*******************************************************************************/

#ifndef ${5:MY_ENUM_CLASS}_HPP
#define $5_HPP 1

/*******************************************************************************
* INTERFACE
*******************************************************************************/

enum class $1 : short {
  None    = 0x00u,
  North   = 0x01u << 0u,
  South   = 0x01u << 1u,
  East    = 0x01u << 2u,
  West    = 0x01u << 3u
};

/*******************************************************************************
* END
*******************************************************************************/

#endif // $5_HPP
${0}
endsnippet

snippet doctest_unit_test_file
/*******************************************************************************
* DOCTEST CONFIG
*******************************************************************************/

#include "doctest.h"

/*******************************************************************************
* USER INCLUDES
*******************************************************************************/

#include "${1:MyClass.hpp}"

/*******************************************************************************
* TEST CASES
*******************************************************************************/

TEST_CASE("setting and getting a value") {

  Foo foo{};

  SUBCASE("set/get positive value") {
    foo.set(9);
    CHECK_EQ(foo.get_val(), 9);
  }

  SUBCASE("set/get negative value") {
    foo.set(-1);
    CHECK_EQ(foo.get_val(), -1);
  }

}
${0}
endsnippet

