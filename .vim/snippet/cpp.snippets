snippet comment_block
/*******************************************************************************
* ${0}
*******************************************************************************/
endsnippet

snippet module_comment
/*******************************************************************************
module:   ${1:mymodule}
author:   ${2:digimokan}
date:     ${3:`date '+%d %b %Y' | tr '[:lower:]' '[:upper:]'`}
purpose:  ${4:greatness}
*******************************************************************************/
${0}
endsnippet

snippet include_system
#include <${1:include_file}>${0}
endsnippet

snippet header_guard
#ifndef ${1:MY_HEADER}_H
#define $1_H 1

${0}

#endif // $1_H
endsnippet

snippet main_with_args
int main (int argc, const char* argv[]) {
  ${0}

  return (0);
}

endsnippet

snippet main_no_args
int main () {
  ${0}

  return (0);
}

endsnippet

snippet for_loop
for (${1:initializer}; ${2:condition}; ${3:increment}) {
  ${0}
}
endsnippet

snippet if
if (${1:condition}) {
  ${2:statement}
}
${0}
endsnippet

snippet if_else
if (${1:condition}) {
  ${2:statement1}
} else {
  ${3:statement2}
}
${0}
endsnippet

snippet if_elseif
if (${1:condition1}) {
  ${2:statement1}
} else if (${3:condition2}) {
  ${4:statement2}
}
${0}
endsnippet

snippet if_elseif_else
if (${1:condition1}) {
  ${2:statement1}
} else if (${3:condition2}) {
  ${4:statement2}
} else {
  ${5:statement3}
}
${0}
endsnippet

snippet class_header_file
/*******************************************************************************
module:   ${1:MyClass}
author:   ${2:digimokan}
date:     ${3:`date '+%d %b %Y' | tr '[:lower:]' '[:upper:]'`}
purpose:  ${4:greatness}
*******************************************************************************/

#ifndef ${5:MY_CLASS}_HPP
#define $5_HPP 1

/*******************************************************************************
* SYSTEM INCLUDES
*******************************************************************************/

#include <cstddef>

/*******************************************************************************
* USER INCLUDES
*******************************************************************************/

#include "ObjectPool.hpp"

/*******************************************************************************
* FORWARD DECLARES
*******************************************************************************/

enum class Grok;

/*******************************************************************************
* INTERFACE
*******************************************************************************/

class $1 {

public:

  // constructors
  $1 ();

  // destructor
  ~$1 ();

  // operators
  $1 (const $1& in) = default;
  $1& operator= (const $1& rh) = default;
  $1 ($1&& in) = default;
  $1& operator= ($1&& rh) = default;

  // specialized methods
  void foo ();

protected:

  // base / derived methods
  void Groo () override;

private:

  // types
  using Storage = typename std::aligned_storage<sizeof(T), std::alignment_of<T>::value>::type;

  // fields
  std::size_t bar;

  // helper methods
  void Baz ();

  // friend class methods
  void Beep (std::shared_ptr<Chime> bell);

  // friend classes
  friend class OtherClass;

};

/*******************************************************************************
* END
*******************************************************************************/

#endif // $5_HPP
${0}
endsnippet

