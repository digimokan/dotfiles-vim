snippet cmake_full_CMakeLists_txt_project_config
################################################################################
# CMAKE VERSION REQUIRED
################################################################################

cmake_minimum_required(VERSION ${1:3.1.3})

################################################################################
# MAIN PROJECT DEF
################################################################################

project("${2:project_cmake_title}" NONE)

################################################################################
# CMAKE LANGUAGE SUPPORT CHECK
################################################################################

# project language and standard
set(project_language "${3:CXX}")
set(project_language_standard "${4:17}")

# enable project language
enable_language(\$\{project_language\})

################################################################################
# SOURCE FILE GROUPS
################################################################################

# project sources
file(GLOB sources "${5:srcdir_a}/*${6:.c}" "${7:srcdir_b}/*${8:.c}")

################################################################################
# EXECUTABLES TO BUILD
################################################################################

# project main entry point source, maine executable name
set(main_source "${9:srcdir_a/main.c}")
set(main_executable_name "${10:my_executable}")

# executable file to produce for main source
add_executable(main_executable_name \$\{main_source\})

# remove main source from project_sources
list(REMOVE_ITEM sources \$\{main_source\})

################################################################################
# USER LIB (COMPILED FROM SOURCE FILE GROUPS)
################################################################################

add_library(user_lib \$\{sources\})

################################################################################
# EXTERNAL LIBS
################################################################################

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

################################################################################
# LINK LIBS --> EXECUTABLES
################################################################################

target_link_libraries(main_executable_name PRIVATE user_lib PRIVATE Threads::Threads)

################################################################################
# ARCHITECTURE CHECKS / DEFS
################################################################################

if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  add_definitions("-DX86_64=1")
elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
  add_definitions("-DI386=1")
else()
  message(FATAL_ERROR "System architecture not 32-bit or 64-bit (based on size of void*)")
endif()

################################################################################
# OS CHECKS / DEFS
################################################################################

if(\$\{CMAKE_SYSTEM_NAME\} MATCHES "Linux")
  add_definitions("-DLINUX=1")
else()
  message(FATAL_ERROR "Project requires Linux libraries.")
endif()

################################################################################
# COMPILER OPTIONS
################################################################################

# warnings: enable most warnings
add_definitions("-Wall -Wno-unused -Wno-unused-result -Wno-nonnull")

# compiler-specific options
if(\$\{CMAKE_\$\{project_language\}_COMPILER_ID\} STREQUAL "GNU")
  message("GNU compiler detected.")
elseif(\$\{CMAKE_\$\{project_language_type\}_COMPILER_ID\} STREQUAL "Clang")
  message("Clang compiler detected.")
elseif(\$\{CMAKE_\$\{project_language_type\}_COMPILER_ID\} STREQUAL "AppleClang")
  message("Apple-Clang compiler detected.")
elseif(\$\{CMAKE_\$\{project_language_type\}_COMPILER_ID\} STREQUAL "Intel")
  message("Intel compiler detected.")
elseif(\$\{CMAKE_\$\{project_language_type\}_COMPILER_ID\} STREQUAL "MSVC")
  message("MSVC compiler detected.")
endif()

################################################################################
# SOURCE CONFIG
################################################################################

# set project-wide language standards
set_target_properties(main_executable_name user_lib PROPERTIES \$\{project_language\}_STANDARD \$\{project_language_standard\} \$\{project_language_type\}_STANDARD_REQUIRED ON)

# set project-wide system-include standards
add_definitions("-D_GNU_SOURCE")

# set project-wide include dirs
include_directories("\$\{CMAKE_SOURCE_DIR\}")
include_directories("\$\{CMAKE_CURRENT_BINARY_DIR\}")

# load cmake built-in modules to check availability
# --> checks make defs used by config.h.in to produce config.h

include(CheckTypeSize)
include(CheckVariableExists)
include(CheckFunctionExists)
include(CheckIncludeFiles)
include(CheckLibraryExists)
include(CheckPrototypeDefinition)
include(TestBigEndian)

# check type availability
# --> also checks sys/types.h, stdint.h, stddef.h unless BUILTIN_TYPES_ONLY

check_type_size("gid_t" GID_T LANGUAGE C)

# check var availability

check_variable_exists("environ" HAVE_DECL_ENVIRON)

# check function availability

check_function_exists("alloca" HAVE_ALLOCA)

# check include availability

check_include_files("alloca.h" HAVE_ALLOCA_H)

# check library availability

if(NOT HAVE_CLOCK_GETTIME)
  check_library_exists(rt clock_gettime "time.h" HAVE_LIBRT)
  if(HAVE_LIBRT)
    target_link_libraries("\$\{project_main_exec_to_build\}" PRIVATE rt)
  endif()
endif()

# check misc conditions

test_big_endian(HAVE_BIG_ENDIAN)
if((NOT HAVE_BIG_ENDIAN) AND HAVE_LONG_LONG)
  set(HAVE_LITTLE_ENDIAN_LONG_LONG 1)
endif()

# process all the defs made by all the checks

# def all the availables in config.h (using rules in config.h.in)
configure_file("\$\{PROJECT_SOURCE_DIR\}/config.h.in" "\$\{CMAKE_CURRENT_BINARY_DIR\}/config.h")

################################################################################
# TESTING (OPTIONAL ADD-ON TO BUILD)
################################################################################

# note BUILD_TESTING=ON must be passed to cmake (auto-calls enable_testing())
if(BUILD_TESTING)

  # load CTest suite build tests
  include(CTest)

  # cmake language support check
  enable_language("CXX")

  # source file lists
  file(GLOB testing_sources "tests/*.c" "more_tests/*.c")

  # test harness executable
  set(test_harness_executable_name "my_testing_executable")
  add_executable(test_harness_executable_name \$\{testing_sources\})
  # cmake ctests to run / linked libs
  add_test(NAME test_harness_executable_name COMMAND test_harness_executable_name)
  # link libs --> executables
  target_link_libraries(test_harness_executable_name PRIVATE user_lib)

  # source config

  # testing language standards
  set_target_properties(test_harness_executable_name PROPERTIES
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED ON)

  # testing include dirs
  include_dir_and_recurse_subdirs(${testing_source_dirs})
  target_include_directories(test_harness_executable_name PRIVATE srcdir_a srcdir_b)

endif()

endsnippet

snippet cmake_valgrind_add_test
find_program(MEMCHK_CMD "${1:valgrind}")
add_test(
  NAME "${2:valgrind_test}"
  COMMAND \$\{MEMCHK_CMD\} ${3:--trace-children=yes --leak-check=full}
  \$<TARGET_FILE:\$\{${4:project_main_exec_to_build}\}>
)
${0}
endsnippet

snippet cmake_std_filesystem_header_test
################################################################################
# SOURCE CONFIG
################################################################################

# load cmake built-in modules to check availability
include(CheckIncludeFiles)

# check include availability
check_include_files("filesystem" HAVE_FILESYSTEM)
if(NOT HAVE_FILESYSTEM)
  message( FATAL_ERROR "C++17 <filesystem> header not found" )
endif()
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  set(CXX_FILESYSTEM_LIBS "stdc++fs")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  set(CXX_FILESYSTEM_LIBS "c++fs")
else()
  message(FATAL_ERROR "std::filesystem: support unknown for non GNU/Clang system")
endif()

################################################################################
# LINK LIBS --> EXECUTABLES
################################################################################

if(NOT "${project_source_main_exec}" STREQUAL "-")
  target_link_libraries("${project_main_exec_to_build}" PRIVATE user_lib PRIVATE ${CXX_FILESYSTEM_LIBS})
endif()

################################################################################
# TESTING (OPTIONAL ADD-ON TO BUILD)
################################################################################

target_link_libraries("${testing_exec_to_build}" PRIVATE user_lib PRIVATE ${CXX_FILESYSTEM_LIBS} PRIVATE)
${0}
endsnippet

snippet cmake_boost_use_header_only_lib
################################################################################
# EXTERNAL LIBS
################################################################################

find_package(Boost 1.66.0 REQUIRED)

################################################################################
# LINK LIBS --> EXECUTABLES
################################################################################

if(NOT "${project_source_main_exec}" STREQUAL "-")
  target_link_libraries("${project_main_exec_to_build}" PRIVATE user_lib PRIVATE ${Boost_LIBRARIES})
endif()

################################################################################
# SOURCE CONFIG
################################################################################

# set project-wide include dirs
include_directories(${Boost_INCLUDE_DIRS})

# load cmake built-in modules to check availability
include(CheckIncludeFiles)

# check include availability
check_include_files("boost/uuid/uuid.hpp;boost/uuid/uuid_generators.hpp;boost/uuid/uuid_io.hpp" HAVE_BOOST_UUID_HPP)
if(NOT HAVE_BOOST_UUID_HPP)
  message( FATAL_ERROR "one or more boost uuid headers not found" )
endif()

################################################################################
# TESTING (OPTIONAL ADD-ON TO BUILD)
################################################################################

target_link_libraries("${testing_exec_to_build}" PRIVATE user_lib PRIVATE ${Boost_LIBRARIES} PRIVATE)
${0}
endsnippet

snippet cmake_boost_use_compiled_lib
################################################################################
# EXTERNAL LIBS
################################################################################

find_package(Boost 1.66.0 REQUIRED program_options)

################################################################################
# LINK LIBS --> EXECUTABLES
################################################################################

if(NOT "${project_source_main_exec}" STREQUAL "-")
  target_link_libraries("${project_main_exec_to_build}" PRIVATE user_lib PRIVATE ${Boost_LIBRARIES})
endif()

################################################################################
# SOURCE CONFIG
################################################################################

# set project-wide include dirs
include_directories(${Boost_INCLUDE_DIRS})

################################################################################
# TESTING (OPTIONAL ADD-ON TO BUILD)
################################################################################

target_link_libraries("${testing_exec_to_build}" PRIVATE user_lib PRIVATE ${Boost_LIBRARIES} PRIVATE)
${0}
endsnippet

